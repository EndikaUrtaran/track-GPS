<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Track-GPS </title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }
        #map { 
            height: 100vh; 
            width: 100vw;
        }
        .control-panel { 
            position: fixed; 
            top: 10px; 
            right: 10px; 
            background: rgba(255, 255, 255, 0.7);
            padding: 8px;
            border-radius: 6px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            z-index: 1000;
            width: 30%;
            min-width: 100px;
            font-size: 12px;
            backdrop-filter: blur(3px);
        }
        .coordenadas { 
            display: flex;
            flex-direction: column;
            gap: 2px;
            margin-bottom: 6px;
        }
        .blue-dot {
            position: relative;
            background: #2196F3;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 2px solid white;
            box-shadow: 0 0 5px rgba(0,0,0,0.3);
        }
        .direction-arrow {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-bottom: 12px solid #2196F3;
            transform-origin: center bottom;
            transform: translate(-50%, -50%);
            filter: drop-shadow(0 1px 1px rgba(0,0,0,0.3));
            transition: transform 0.1s ease;
        }
        .small-button {
            font-size: 12px;
            padding: 4px 8px;
            margin: 2px 0;
            width: 100%;
        }
        .map-credits {
            position: fixed;
            bottom: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.7);
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 10px;
            z-index: 1000;
            box-shadow: 0 1px 4px rgba(0,0,0,0.2);
            backdrop-filter: blur(3px);
        }
    </style>
</head>
<body>
    <div class="control-panel">
        <div class="panel-title">Track-GPS</div>
        <div class="coordenadas">
            <span>Lat: <span id="lat">-</span></span>
            <span>Lon: <span id="lon">-</span></span>
        </div>
        <button class="small-button" id="start">‚ñ∂ Start</button>
        <button class="small-button" id="stop" disabled>‚èπ Stop</button>
        <input type="file" id="gpx-file" accept=".gpx" style="display: none;">
        <button class="small-button" onclick="document.getElementById('gpx-file').click()">üìÇ GPX</button>
        <a id="download" style="display:none;" class="small-button">‚¨á Download</a>
    </div>
    <div class="map-credits" id="mapCredits">Capa: OpenTopoMap</div>
    <div id="map"></div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-gpx/1.7.0/gpx.min.js"></script>
    <script>
        let map;
        let track = [];
        let polyline = null;
        let watchId = null;
        let currentLocationMarker = null;
        let isRecording = false;
        let lastCenteredPixel = null;
        let lastMoveTime = Date.now();
        let isDragging = false;
        let currentHeading = 0;
        const RECENTER_DISTANCE = 30;
        const RECENTER_DELAY = 5000;

        // Capas base
        const baseLayers = {
            "OpenTopoMap": L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data: ¬© OpenStreetMap contributors, SRTM | Map style: ¬© OpenTopoMap (CC-BY-SA)',
                maxZoom: 17,
                subdomains: 'abc'
            }),
            "OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors',
                maxZoom: 19
            }),
            "IGN Mapa": L.tileLayer('https://www.ign.es/wmts/mapa-raster?request=GetTile&layer=MTN&style=default&tilematrixset=GoogleMapsCompatible&Service=WMTS&Request=GetTile&Version=1.0.0&Format=image/jpeg&TileMatrix={z}&TileCol={x}&TileRow={y}', {
                maxZoom: 18,
                attribution: '¬© Instituto Geogr√°fico Nacional de Espa√±a',
                bounds: [[27.433542, -18.393684], [43.993308, 4.556944]]
            })
        };

        // Capa de calor Strava
        const stravaHeatmap = L.tileLayer('https://proxy.nakarte.me/https/heatmap-external-a.strava.com/tiles-auth/all/hot/{z}/{x}/{y}.png?px=256', {
            attribution: 'Heatmap ¬© Strava',
            opacity: 0.5,
            maxZoom: 17,
            pane: 'overlayPane'
        });

        const overlays = {
            "Strava Heatmap": stravaHeatmap
        };

        const blueDotIcon = L.divIcon({
            className: 'blue-dot',
            iconSize: [16, 16],
            html: '<div class="direction-arrow"></div>'
        });

        // Manejar orientaci√≥n del dispositivo
        function handleOrientation(event) {
            if (event.alpha !== null && currentLocationMarker) {
                currentHeading = event.alpha;
                const arrow = currentLocationMarker.getElement().querySelector('.direction-arrow');
                const adjustedHeading = 360 - currentHeading; // Ajuste para alinear con norte verdadero
                arrow.style.transform = `translate(-50%, -50%) rotate(${adjustedHeading}deg)`;
            }
        }

        // Solicitar permisos de orientaci√≥n
        function requestOrientationPermission() {
            if (typeof DeviceOrientationEvent !== 'undefined' && 
                typeof DeviceOrientationEvent.requestPermission === 'function') {
                DeviceOrientationEvent.requestPermission()
                    .then(permissionState => {
                        if (permissionState === 'granted') {
                            window.addEventListener('deviceorientation', handleOrientation);
                        }
                    })
                    .catch(console.error);
            } else {
                window.addEventListener('deviceorientation', handleOrientation);
            }
        }

        // Inicializaci√≥n del mapa
        function initMap(position) {
            map = L.map('map', {
                center: [position.coords.latitude, position.coords.longitude],
                zoom: 15,
                zoomControl: false
            });

            // Control de capas
            L.control.layers(baseLayers, overlays, {
                position: 'bottomright',
                collapsed: true
            }).addTo(map);

            // Eventos de arrastre
            map.on('dragstart', () => {
                isDragging = true;
                lastMoveTime = Date.now();
            });

            map.on('dragend', () => {
                isDragging = false;
                lastMoveTime = Date.now();
            });

            // Capa inicial
            baseLayers.OpenTopoMap.addTo(map);

            // Actualizar cr√©ditos
            map.on('baselayerchange', (e) => {
                document.getElementById('mapCredits').textContent = `Capa: ${e.name}`;
            });

            // Marcador de posici√≥n
            currentLocationMarker = L.marker(
                [position.coords.latitude, position.coords.longitude],
                { icon: blueDotIcon, zIndexOffset: 1000 }
            ).addTo(map);

            lastCenteredPixel = map.latLngToContainerPoint(currentLocationMarker.getLatLng());

            // Seguimiento GPS
            watchId = navigator.geolocation.watchPosition(
                (pos) => updatePosition(pos),
                (err) => console.error('Error:', err),
                { enableHighAccuracy: true, maximumAge: 0, timeout: 5000 }
            );

            // Solicitar permisos de orientaci√≥n
            requestOrientationPermission();

            // Verificar posici√≥n peri√≥dicamente
            setInterval(checkDistanceFromCenter, 1000);
        }

        function checkDistanceFromCenter() {
            if (!currentLocationMarker || !map || isDragging) return;

            const currentPos = currentLocationMarker.getLatLng();
            const currentPixel = map.latLngToContainerPoint(currentPos);

            if (!lastCenteredPixel) {
                lastCenteredPixel = currentPixel;
                return;
            }

            const distance = Math.sqrt(
                Math.pow(currentPixel.x - lastCenteredPixel.x, 2) +
                Math.pow(currentPixel.y - lastCenteredPixel.y, 2)
            );

            if (distance >= RECENTER_DISTANCE && (Date.now() - lastMoveTime) > RECENTER_DELAY) {
                recenterMap();
            }
        }

        function recenterMap() {
            if (!currentLocationMarker) return;
            
            const currentPos = currentLocationMarker.getLatLng();
            map.setView(currentPos, map.getZoom(), {
                animate: true,
                duration: 1.5,
                easeLinearity: 0.25
            });

            lastCenteredPixel = map.latLngToContainerPoint(currentPos);
        }

        function updatePosition(position) {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            
            currentLocationMarker.setLatLng([lat, lon]);
            document.getElementById('lat').textContent = lat.toFixed(6);
            document.getElementById('lon').textContent = lon.toFixed(6);
            
            if (isRecording) {
                track.push([lat, lon]);
                updatePolyline();
            }
        }

        function updatePolyline() {
            if (polyline) map.removeLayer(polyline);
            polyline = L.polyline(track, {
                color: '#ff0000',
                weight: 4,
                lineJoin: 'round'
            }).addTo(map);
        }

        // Manejo de GPX
        document.getElementById('gpx-file').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (event) => {
                new L.GPX(event.target.result, {
                    async: true,
                    marker_options: {
                        startIconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet-gpx/1.7.0/pin-icon-start.png',
                        endIconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet-gpx/1.7.0/pin-icon-end.png',
                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet-gpx/1.7.0/pin-shadow.png'
                    }
                }).on('loaded', (e) => {
                    map.fitBounds(e.target.getBounds());
                }).addTo(map);
            };
            reader.readAsText(file);
        });

        // Controles de grabaci√≥n
        document.getElementById('start').addEventListener('click', () => {
            isRecording = true;
            track = [];
            document.getElementById('start').disabled = true;
            document.getElementById('stop').disabled = false;
            document.getElementById('download').style.display = 'none';
        });

        document.getElementById('stop').addEventListener('click', () => {
            isRecording = false;
            document.getElementById('start').disabled = false;
            document.getElementById('stop').disabled = true;
            document.getElementById('download').style.display = 'inline';
            
            const gpxContent = `<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" creator="GPS Tracker">
    <trk><name>${new Date().toLocaleString()}</name><trkseg>
    ${track.map(p => `<trkpt lat="${p[0]}" lon="${p[1]}"><ele>0</ele></trkpt>`).join('')}
    </trkseg></trk>
</gpx>`;
            
            const blob = new Blob([gpxContent], {type: 'application/gpx+xml'});
            document.getElementById('download').href = URL.createObjectURL(blob);
            document.getElementById('download').download = `track-${Date.now()}.gpx`;
        });

        // Iniciar aplicaci√≥n
        navigator.geolocation.getCurrentPosition(
            (pos) => initMap(pos),
            (err) => {
                console.error('Error:', err);
                document.getElementById('coordenadas').textContent = 'Error: Permiso denegado';
            },
            { enableHighAccuracy: true, maximumAge: 0, timeout: 5000 }
        );
    </script>
</body>
</html>
